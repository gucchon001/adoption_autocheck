# プログラム仕様書

## 1. システム概要
このシステムは、Pythonプログラムを分析し、OpenAIのAPIを活用してリファクタリング提案や詳細な仕様書を生成するAIチャットアプリケーションです。主に以下の機能を提供します：
- Pythonファイルの統合と特定パターンによる除外
- 統合されたコードを基にした機能要件仕様書の生成
- 機能要件仕様書と統合コードを基にした詳細プログラム仕様書の生成
- リファクタリング提案の生成

システムはコマンドラインインターフェースを通じて操作し、ユーザーが実行したい機能を選択できます。各機能はモジュール化され、堅牢なエラーハンドリングとログ記録機能を備えています。

## 2. ファイルごとの役割と詳細説明

- **check_refactoring.py**: 統合されたPythonコードに基づき、AIを利用してリファクタリング提案を生成するクラスを提供します。
- **generate_detailed_spec.py**: 機能要件仕様書と統合されたコードを基に、AIを利用して詳細なプログラム仕様書を生成するクラスを提供します。
- **generate_spec.py**: 統合されたPythonコードを基に、AIを利用して機能要件仕様書を生成するクラスを提供します。
- **logging_config.py**: アプリケーション全体のロギング設定を管理し、ログファイルの生成とログレベルの設定を行います。
- **main.py**: システムのエントリーポイントであり、ユーザーからの入力を処理し、各機能を実行します。
- **merge_files.py**: 指定されたディレクトリ内のPythonファイルを統合し、除外パターンに基づいて不要なファイルを除外する機能を提供します。
- **utils.py**: 共通で使用されるユーティリティ関数を提供し、設定の読み込み、ファイルの読み書き、Pythonファイルの一覧取得を行います。

## 3. 関数ごとの役割と詳細説明

### check_refactoring.py

- `RefactoringChecker.__init__()`: 設定を読み込み、OpenAIクライアントを初期化します。
- `RefactoringChecker._read_merge_file()`: 統合されたファイルを読み込みます。
- `RefactoringChecker._generate_prompt()`: リファクタリング提案のためのプロンプトを生成します。
- `RefactoringChecker._get_ai_response()`: OpenAI APIを使用してリファクタリング提案を取得します。
- `RefactoringChecker.generate_suggestions()`: リファクタリング提案を生成し、ファイルに保存します。
- `RefactoringChecker.validate_suggestions()`: 生成されたリファクタリング提案の妥当性を検証します。

### generate_detailed_spec.py

- `DetailedSpecificationGenerator.__init__()`: 設定を読み込み、OpenAIクライアントを初期化します。
- `DetailedSpecificationGenerator._read_input_files()`: 必要な入力ファイルを読み込みます。
- `DetailedSpecificationGenerator._generate_prompt()`: 詳細仕様書生成のためのプロンプトを生成します。
- `DetailedSpecificationGenerator._get_ai_response()`: OpenAI APIを使用して詳細仕様書を生成します。
- `DetailedSpecificationGenerator.generate()`: 詳細仕様書を生成し、ファイルに保存します。
- `DetailedSpecificationGenerator.validate_specification()`: 生成された詳細仕様書の妥当性を検証します。

### その他のファイルの関数

- `merge_files.PythonFileMerger.process()`: Pythonファイルをマージし、指定された出力ファイルに書き込みます。
- `utils.read_settings()`: 設定ファイルを読み込みます。
- `utils.write_file_content()`: ファイルに内容を書き込みます。
- `utils.read_file_safely()`: ファイルを安全に読み込みます。
- `utils.get_python_files()`: 指定ディレクトリ配下のPythonファイルを取得します。

## 4. 非機能要件

- **パフォーマンス**: 各処理は合理的な時間内に完了すること。
- **信頼性**: 例外処理を含む堅牢なエラーハンドリングを実装すること。
- **ログ記録**: すべての活動をログに記録し、デバッグモードで詳細なログを取得可能にすること。

## 5. 技術要件

- **言語と環境**: Python 3.x
- **外部ライブラリ**: OpenAI APIライブラリ
- **設定ファイル**: `settings.ini`において、APIキーやディレクトリ情報を設定可能。
- **実行環境**: WindowsとUnix系OS上での動作を想定。
- **依存関係**: `requirements.txt`に必要なパッケージを記載。

## 6. 使用手順と注意事項

1. `settings.ini`ファイルにAPIキーとディレクトリ情報を設定します。
2. 必要なパッケージをインストールするために、`requirements.txt`を使用して環境をセットアップします。
3. `main.py`を実行し、提供されるオプションから実行したい機能を選択します。
4. 各機能の実行結果は対応するディレクトリ内に保存されます。
5. デバッグモードを有効にすることで、詳細なログを取得することができます。